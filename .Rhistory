pol_n_predation = 26
pol_n_no_predation = 184
pol_n_total = 210
pol_n_total = pol_n_predation+pol_n_no_predation
pol_n_predation_rate = pol_n_predation/pol_n_total
psd_n_predation = 25
psd_n_no_predation = 706
psd_n_total = psd_n_predation+psd_n_no_predation
psd_predation_rate = psd_n_predation/psd_n_total
print(
paste0(
"The seed predation rate for Polyscias fulva is:",
round(pol_n_predation_rate, digits = 3)))
print(
paste0(
"The seed predation rate for Pseudospondias microcarpa is:",
round(psd_predation_rate, digits = 3)))
predation_ratio = psd_predation_rate/pol_n_predation_rate)
predation_ratio = psd_predation_rate/pol_n_predation_rate
print(predation_ratio)
print(predation_ratio, digits = 3)
require(palmerpenguins)
dat_ade = droplevels(subset(penguins, species == "Adelie"))
hist(dat_ade$body_mass_g, main = "Adelie Penguins: Body Mass", xlab = "Body Mass (g)")
boxplot(dat_ade$body_mass_g ~ dat_ade$sex)
boxplot(dat_ade$body_mass_g ~ dat_ade$sex, main = "Adelie Body Mass by Sex", xlab = "Sex", ylab = "Body Mass (g)", col = "magenta2")
?t.test()
mean(dat_ade$body_mass_g ~ sex)
mean(droplevels(subset(dat_ade, sex == "female")
boxplot(dat_ade$body_mass_g ~ dat_ade$sex, main = "Adelie Body Mass by Sex", xlab = "Sex", ylab = "Body Mass (g)", col = "magenta2")
boxplot(dat_ade$body_mass_g ~ dat_ade$sex, main = "Adelie Body Mass by Sex", xlab = "Sex", ylab = "Body Mass (g)", col = "magenta2")
mean(droplevels(subset(dat_ade, sex == "female")
Adelie_f <- droplevels(subset(penguins, sex == "female"))
Adelie_f <- droplevels(subset(penguins, sex == "female"))
t.test(Adelie_f$body_mass_g)
Adelie_m <- droplevels(subset(penguins, sex == "male"))
?t.test
t.test(Adelie_m$body_mass_g, alternative = greater 4000)
t.test(Adelie_m$body_mass_g, alternative = greater)
t.test(Adelie_m$body_mass_g, alternative = "greater")
t.test(Adelie_m$body_mass_g, alternative = "greater", 4000)
t.test(Adelie_m$body_mass_g, alternative = "greater", mu = 4000)
t.test(x = Adelie_f$body_mass_g, y = Adelie_m$body_mass_g)
t.test(x = Adelie_f$body_mass_g, y = Adelie_m$body_mass_g, alternative = "two.sided")
t.test(Adelie_m$body_mass_g, Adelie_f$body_mass_g, alternative = "greater")
t.test(Adelie_m$body_mass_g, Adelie_f$body_mass_g, alternative = "less")
require(here)
dat_veg <- read.csv(here("data", "vegdata.csv"))
dat_birds <- read.csv(here("data", "bird.sub.csv"))
dat_habs <- read.csv(here("data", "hab.sub.csv"))
require(palmerpenguins)
dat_pen = droplevels(subset(penguins, species != "Gentoo"))
t.test(flipper_length_mm ~ species, data = dat_pen, alternative = "less")
install.packages("simpleboot")
require(simpleboot)
dat_adelie = droplevels(subset(penguins, species = "Adelie"))
dat_chin = droplevels(subset(penguins, species = "Chinstrap"))
pen_boot = two.boot(na.omit(dat_adelie$flipper_length_mm), na.omit(dat_chin$flipper_length_mm), FUN = mean, R = 10000, student = FALSE, weights = NULL)
str(pen_boot)
hist(pen_boot$t)
hist(pen_boot$t0)
hist(pen_boot$t)
sd(pen_boot$t)
hist(pen_boot$t, main = "Histogram of 10,000 Bootstrap Differences in Mean Flipper Length",
xlab = "Difference in mean flipper length (mm)
Adelie and Chinstrap Penguins")
dat_adelie = droplevels(subset(penguins, species == "Adelie"))
dat_chin = droplevels(subset(penguins, species == "Chinstrap"))
pen_boot = two.boot(na.omit(dat_adelie$flipper_length_mm), na.omit(dat_chin$flipper_length_mm), FUN = mean, R = 10000, student = FALSE, weights = NULL)
str(pen_boot)
hist(pen_boot$t, main = "Histogram of 10,000 Bootstrap Differences in Mean Flipper Length",
xlab = "Difference in mean flipper length (mm)
Adelie and Chinstrap Penguins")
sd(pen_boot$t)
?quantile
quantile(pen_boot$t, probs = c(0.025, 0.975))
summary(pen_boot$t)
?ecdf
ecdf(pen_boot$t)
pen_ecdf = function(x){
ecdf(data = pen_boot$t, x)
}
pen_ecdf(-0.5)
n
pen_ecdf = function(x){
ecdf(x)
}
pen_ecdf = ecdf(pen_boot$t)
pen_ecdf(-4.5)
1 - pen_ecdf(-4.5)
pen_ecdf(-8)
boxplot(pine ~ treatment, dat = dat_veg)
dat_tree = droplevels(subset(dat_veg, treatment %in% c("control", "clipped")))
boxplot(pine ~ treatment, dat = dat_tree)
table(dat_tree$treatment)
#Section 2 (Trees), Questions 9-11
head(dat_veg)
#Section 2 (Trees), Questions 9-11
head(dat_tree)
veg = droplevels(subset(dat_tree, != "birch"))
?wilcox.test
wilcox.test(dat_tree$pine)
wilcox.test(dat_tree$pine == "clipped", dat_tree$pine == "control")
wilcox.test(dat_tree$pine)
pine_cont = droplevels(subset(dat_veg, treatment == "control"))
pine_clip = droplevels(subset(dat_veg, treatment == "clipped"))
wilcox.test(pine_cont, pine_clip)
pine_clip
wilcox.test(pine_cont$pine, pine_clip$pine)
tree_boot = two.boot(na.omit(pine_cont), na.omit(pine_clip), FUN = mean, R = 10000, student = FALSE, weights = NULL)
warnings()
str(tree_boot)
boot.ci(tree_boot)
require(simpleboot)
boot.ci(tree_boot)
require(boot)
boot.ci(tree_boot)
tree_boot = two.boot(na.omit(pine_cont$pine), na.omit(pine_clip$pine), FUN = mean, R = 10000, student = FALSE, weights = NULL)
str(tree_boot)
hist(tree_boot$t)
boot.ci(tree_boot)
tree_boot = two.boot(na.omit(pine_clip$pine), na.omit(pine_cont$pine), FUN = mean, R = 10000, student = FALSE, weights = NULL)
boot.ci(tree_boot)
hist(tree_boot$t)
quantile(tree_boot$t, probs = c(0.025, 0.975))
summary(pine_clip$pine)
summary(pine_cont$pine)
mean(pine_clip$pine) - mean(pine_cont$pine)
#Section 3 (Birds & Habs), Questions 12-20
dall = merge(
dat_birds,
dat_habs,
by = c("basin", "sub"))
head(dall[, c("b.sidi", "s.sidi")])
b_sidi_mean = mean(dall$b.sidi, na.rm = TRUE)
b_sidi_sd = sd(dall$b.sidi, na.rm = TRUE)
dall$b.sidi.standardized = (dall$b.sidi - b_sidi_mean)/b_sidi_sd
mean(dall$b.sidi.standardized)
s_sidi_mean = mean(dall$s.sidi, na.rm = TRUE)
s_sidi_sd = sd(dall$s.sidi, na.rm = TRUE)
dall$s.sidi.standardized = (dall$s.sidi - s_sidi_mean)/s_sidi_sd
mean(dall$s.sidi.standardized)
plot(
b.sidi ~ s.sidi, data = dall,
main = "Simpson's Diversity Indices",
xlab = "Vegetation Cover Diversity",
ylab = "Bird Diversity", pch = 70
)
fit_1 = lm(b.sidi ~ s.sidi, data = dall)
coef(fit_1)
slope_observed = coef(fit_1)[2]
coef(fit_1)
abline(fit_1)
dat_1 =
subset(
dall,
select = c(b.sidi, s.sidi))
#Section 3.2 (Monte Carlo)
set.seed(123)
index_1 = sample(nrow(dat_1), replace = TRUE)
index_2 = sample(nrow(dat_1), replace = TRUE)
dat_resampled_i =
data.frame(
b.sidi = dat_1$b.sidi[index_1],
s.sidi = dat_1$s.sidi[index_2]
)
fit_resampled_i = lm(b.sidi ~ s.sidi, data = dat_resampled_i)
slope_resampled_i = coef(fit_resampled_i)[2]
print(slope_resampled_i)
abline(fit_resampled_i)
plot(
b.sidi ~ s.sidi, data = dat_resampled_i,
main = "Simpson's diversity indices (MC resampled data)",
xlab = "Vegetation cover diversity",
ylab = "Bird diversity")
abline(fit_resampled_i)
m = 10000
result_mc = numeric(m)
for(i in 1:m)
{
index_1 = sample(nrow(dat_1), replace = TRUE)
index_2 = sample(nrow(dat_1), replace = TRUE)
dat_resampled_i = data.frame(b.sidi = dat_1$b.sidi[index_1], s.sidi = dat_1$s.sidi[index_2])
fit_resampled_i = lm(b.sidi ~ s.sidi, data = dat_resampled_i)
result_mc[i] = coef(fit_resampled_i)
}
index_1 = sample(nrow(dat_1), replace = TRUE)
index_2 = sample(nrow(dat_1), replace = TRUE)
dat_resampled_i = data.frame(b.sidi = dat_1$b.sidi[index_1], s.sidi = dat_1$s.sidi[index_2])
fit_resampled_i = lm(b.sidi ~ s.sidi, data = dat_resampled_i)
result_mc[i] = coef(fit_resampled_i)
result_mc[i] = coef(fit_resampled_i)[2]
for(i in 1:m)
{
index_1 = sample(nrow(dat_1), replace = TRUE)
index_2 = sample(nrow(dat_1), replace = TRUE)
dat_resampled_i = data.frame(b.sidi = dat_1$b.sidi[index_1], s.sidi = dat_1$s.sidi[index_2])
fit_resampled_i = lm(b.sidi ~ s.sidi, data = dat_resampled_i)
result_mc[i] = coef(fit_resampled_i)[2]
}
hist(
result_mc,
main = "Null Distribution of Regression Slope",
xlab = "Slope Parameter")
abline(v = slope_observed,lty = 2, col = "red", lwd = 2)
quantile(result_mc, c(.05))
print(slope_observed)
crit_value_MC = quantile(result_mc, c(.05))
print(crit_value_MC)
abline(v = crit_value_MC,lty = 2, col = "green", lwd = 2)
index_1 = sample(nrow(dat_1), replace = TRUE)
dat_boot = dat_1[index_1, ]
head(dat_boot)
fit_bs1 = lm(b.sidi ~ s.sidi, data = dat_boot)
coef(fitbs1)
coef(fit_bs1)
coef(fit_1)
m = 10000
result_bs = numeric(m)
for(i in 1:m)
{
bs_index_1 = sample(nrow(dat_1), replace = TRUE)
dat_boot = dat_1[bs_index_1, ]
fit_bs1_i = lm(b.sidi ~ s.sidi, data = dat_boot)
result_bs[i] = coef(fit_bs1_i)[2]
}
hist(
result_bs,
main = "Alternative Distribution of Regression Slope",
xlab = "Slope Parameter")
abline(v = slope_observed, lty = 2, col = "red", lwd = 2)
abline(v = 0, lty = 2, col = 1, lwd = 2)
plot(
density(result_mc),
main = "Null Distribution Density Plot",
xlab = "Slope Coefficient")
plot(
density(result_bs),
main = "Alternative Disrtibution Density Plot",
xlab = "Slope Coefficient")
plot(
density(result_mc),
main = "Null Distribution Density Plot",
xlab = "Slope Coefficient")
lines(density(result_bs))
plot(
density(result_mc),
main = "Null Distribution Density Plot",
xlab = "Slope Coefficient"
xlim = c(-0.06, 0.04))
plot(
density(result_mc),
main = "Null Distribution Density Plot",
xlab = "Slope Coefficient",
xlim = c(-0.06, 0.04))
lines(density(result_bs))
plot(
density(result_mc),
main = "Null Distribution Density Plot",
xlab = "Slope Coefficient",
xlim = c(-0.06, 0.04),
ylim = c(0, 60))
lines(density(result_bs))
plot(
density(result_mc),
main = "Null Distribution Density Plot",
xlab = "Slope Coefficient",
xlim = c(-0.06, 0.04),
ylim = c(0, 70))
lines(density(result_bs))
lines(density(result_bs), col = 2)
legend(
'topright',
legend=c('Null', 'Alt'),
col=c("forestgreen","orangered3"))
legend(
'topright',
legend=c('Null', 'Alt'),
lty=c(1,1),col=c("forestgreen","orangered3","slateblue3"),inset=c(.1,.1))
legend(
'topright',
legend=c('Null', 'Alt'),
lty=c(1,1),col=c("forestgreen","orangered3","slateblue3"))
legend(
'topright',
legend=c('Null', 'Alt'),
lty=c(1,1),col=c(1,2))
plot(
density(result_mc),
main = "Null Distribution Density Plot",
xlab = "Slope Coefficient",
xlim = c(-0.06, 0.04),
ylim = c(0, 70))
lines(density(result_bs), col = 2)
legend(
'topright',
legend=c('Null', 'Alt'),
lty=c(1,1),col=c(1,2))
plot(
density(result_mc),
main = "Null & Alt Distribution Density Plots",
xlab = "Slope Coefficient",
xlim = c(-0.06, 0.04),
ylim = c(0, 70))
lines(density(result_bs), col = 2)
legend(
'topright',
legend=c('Null', 'Alt'),
lty=c(1,1),col=c(1,2))
rm(list = ls())
rope = read.csv(here("data", "rope.csv"))
rope$rope.type = factor(rope$rope.type)
levels(rope$rope.type)
require(here)
rope = read.csv(here("data", "rope.csv"))
rope$rope.type = factor(rope$rope.type)
levels(rope$rope.type)
rope$rope.type
summary(rope$rope.type)
n_obs = 121
n_groups = 6
boxplot(p.cut ~ rope.type, data = rope)
grand_mean = mean(rope$p.cut)
grand_resids = rope$p.cut - grand_mean
sum_grand_resids = sum( (rope$p.cut - grand_mean)^2)
ss_tot = sum_grand_resids
df_total = n_obs - 1
aggregate(
x = rope$p.cut,
by = list(rope$rope.type),
FUN = function (x) mean(x))
agg_resids = aggregate(
x = rope$p.cut,
by = list(rope$rope.type),
FUN = function(x){
(x - mean(x))
})
aggregate(
x = rope$p.cut,
by = list(rope$rope.type),
FUN = function (x) mean(x))
agg_resids = aggregate(
x = rope$p.cut,
by = list(rope$rope.type),
FUN = function(x){
(x - mean(x))
})
str(agg_resids)
agg_sum_sq_resids = aggregate(
x = rope$p.cut,
by = list(rope$rope.type),
FUN = function (x){
sum( (x - mean(x))^2)
})
str(agg_sum_sq_resids)
agg_sum_sq_resids$x
ss_within = sum(agg_sum_sq_resids$x)
ss_within
df_within = n_obs - n_groups
ss_among = ss_tot - ss_within
df_among = n_groups - 1
ms_among = ss_among / df_among
ms_within = ss_within / df_within
f_ratio = ms_among / ms_within
p_value = pf(f_ratio, df_among, df_within, lower.tail = FALSE)
fit_1 = lm(p.cut ~ rope.type, data = rope)
anova_fit_1 = anova(fit_1)
str(anova_fit_1)
anova_fit_1$`Sum Sq`
#Tukey HSD Test
rope2 = droplevels(
subset(
rope,
rope.type %in% c("PI", "VEL", "XTC"))
)
boxplot(
p.cut ~ rope.type,
data = rope2,
las = 2,
xlab = "",
ylab = "Proportion Rope Cut",
main = "Subset of Rope Data")
#Tukey HSD Test
rope2 = droplevels(
subset(
rope,
rope.type %in% c("PI", "VEL", "XTC"))
)
boxplot(
p.cut ~ rope.type,
data = rope2,
las = 2,
xlab = "",
ylab = "Proportion Rope Cut",
main = "Subset of Rope Data")
mtext("Rope Type", side = 1, line = 3)
fit_rope_2 = lm(p.cut ~ rope.type, data = rope2)
rope2_hsd = TukeyHSD(aov(fit_rope_2))
class(rope2_hsd)
round(rope2_hsd$rope.type, digits =4)
bartlett.test(p.cut, data = rope)
str(anova_fit_1)
anova_fit_1$`Sum Sq`
#Tukey HSD Test
rope2 = droplevels(
subset(
rope,
rope.type %in% c("PI", "VEL", "XTC"))
)
boxplot(
p.cut ~ rope.type,
data = rope2,
las = 2,
xlab = "",
ylab = "Proportion Rope Cut",
main = "Subset of Rope Data")
fit_rope_2 = lm(p.cut ~ rope.type, data = rope2)
rope2_hsd = TukeyHSD(aov(fit_rope_2))
class(rope2_hsd)
round(rope2_hsd$rope.type, digits =4)
bartlett.test(p.cut, data = rope)
bartlett.test(rope$p.cut, data = rope)
?bartlett.test
bartlett.test(rope$p.cut, g = rope$rope.type)
fit_rope_1 = lm(p.cut ~ rope.type, data = rope)
summary(fit_rope_1)
resids = residuals(fit_rope_1)
resids
shapiro.test(resids)
head(resids)
shapiro.test(resids$1)
shapiro.test(resids$"1")
shapiro.test("1", data = resids)
shapiro.test(resids[1])
shapiro.test(resids[[1])
shapiro.test(resids[[1]])
shapiro.test(resids[[1]])
head(resids)
colnames(resids) = c("BLAZE","BS","PI","SB","VEL","XTC")
fit_BLAZE = lm(p.cut ~ rope.type == "BLAZE", data = rope)
resids_BLAZE = residuals(fit_BLAZE)
shapiro.test(resids_BLAZE)
fit_BS = lm(p.cut ~ rope.type == "BS", data = rope)
resids_BS = residuals(fit_BS)
View(fit_BS)
shapiro.test(resids_BS)
fit_BLAZE = lm(p.cut ~ rope.type == "BLAZE", data = rope)
fit_BS = lm(p.cut ~ rope.type == "BS", data = rope)
fit_PI = lm(p.cut ~ rope.type == "PI", data = rope)
fit_SB = lm(p.cut ~ rope.type == "SB", data = rope)
fit_VEL = lm(p.cut ~ rope.type == "VEL", data = rope)
fit_XTC = lm(p.cut ~ rope.type == "XTC", data = rope)
resids_BLAZE = residuals(fit_BLAZE)
resids_BS = residuals(fit_BS)
resids_PI = residuals(fit_PI)
resids_SB = residuals(fit_SB)
resids_VEL = residuals(fit_vEL)
resids_VEL = residuals(fit_VEL)
resids_XTC = residuals(fit_XTC)
shapiro.test(resids_PI)
shapiro.test(resids_SB)
shapiro.test(resids_VEL)
shapiro.test(resids_XTC)
shapiro.test(resids_BLAZE)
shapiro.test(resids_BS)
shapiro.test(resids_PI)
shapiro.test(resids_SB)
shapiro.test(resids_VEL)
shapiro.test(resids_XTC)
bartlett.test(resids_XTC)
shapiro.test(resids_XTC)
fpens = droplevels(subset(penguins, sex == "Female"))
require(palmerpenguins)
fpens = droplevels(subset(penguins, sex == "Female"))
View(fpens)
fpens = droplevels(subset(penguins, sex == "female"))
?boxplot
boxplot(
body_mass_g ~ species,
data = fpens,
xlab = "Species",
ylab = "Body Mass (g)",
main = "Female Penguins Body Mass vs Species Comparison"
)
bartlett.test(fpens$body_mass_g ~ fpens$species)
plot(body_mass_g ~ species, data = fpens)
scatterplot(body_mass_g ~ species, data = fpens)
fit_fpens = lm(body_mass_g ~ species, data = fpens)
summary(fit_fpens)
resids_fpens = residuals(fit_fpens)
shapiro.test(resids_fpens)
fpen2 = droplevels(
subset(
fpens,
species %in% c("Adelie", "Chinstrap", "Gentoo"))
)
fpens2 = droplevels(
subset(
fpens,
species %in% c("Adelie", "Chinstrap", "Gentoo"))
)
fit_fpens2 = lm(body_mass_g ~ species, data = fpens2)
fpens2_hsd = TukeyHSD(aov(fit_fpens2))
class(fpens2_hsd)
round(fpens2_hsd$species, digits =4)
fpens_hsd = TukeyHSD(aov(fit_fpens))
class(fpens_hsd)
round(fpens_hsd$species, digits =4)
fpens_hsd = TukeyHSD(aov(resids_fpens))
fpens_hsd = TukeyHSD(aov(fit_fpens))
class(fpens_hsd)
round(fpens_hsd$species, digits =4)
