---
title: "final_r_reference"
author: "Matthew Jusino"
date: "2022-12-13"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
# R Reference Guide {.tabset .tabset-pills}


## Loading Data and Packages

### Using require() and library()
You can use the require or library fucntions to retrieve packages you want to work with.

```{r}
require(here)
require(palmerpenguins)
```

### Using the here() and read.csv() functions
Using the 'here' and 'read.csv' functions, we can read the data contained in a csv into a new data frame

```{r}
ginkgo = read.csv(here("data", "ginkgo_data_2021.csv"))
```


## Data Structures

### c() function
The use of the c() function is to combine arguments into a vector (a 1D data structure consisting of 1+ elements).

All elements must be the same type (cannot combine character and numeric types in the same c() function).

```{r}
#Creating a numeric vector
num_vec = c(1, 4, 8, 9, 13)

#Creating a character vector
char_vec = c("a", "fish", "12", "overload")
```

You can view the contents of a vector by typing the vector name or using the print() funcion.

```{r}
num_vec

print(char_vec)
```

### length() function
The length() function is used to determine the length of a vector or list.
It will return the length of the object as a simple value.

```{r}
length(num_vec)
length(char_vec)
```

### matrix() function
The matrix() function is used to create a matrix from given values. A matrix is a 2D data structure that stores our data in rows and columns.

```{r}
#Here we will create a matrix with 2 rows and 3 columns
matrix(num_vec, nrow = 2, ncol = 3)
```

As we can see, the final element in row 2 column 3 is filled with an 1 because there is no 6th element to place in that spot since we only had 5 elements in our vector. Instead, the matrix is repeating the with the first element of the vector.

```{r}
#If we change the nrow and ncol arguments to create a matrix that has a number of elements that is a multiple or sub-multiple of 5, as the error suggested, we will have full repeats
matrix(num_vec, byrow = TRUE, nrow = 3, ncol = 5)
```
Adding the byrow argument here is just to ensure the elements are populated across the columns then down to the next row rather than poplating down a column then over to the next. 

### data.frame() function
The data.frame() function is used to store data in a similar way to a matrix, but can be used to store data of different types in each column, unlike matrices. Data imported in .csv format is read into a data frame

```{r}
cities = c("Albuquerque", "Boston", "Chattanooga", "Denver")
members = c(4750, 10300, 8703, 6729)
test_df = data.frame(cities, members)
print(test_df)
```

### Example Using the Ginkgo Data

```{r}
nrow(ginkgo)
ncol(ginkgo)
dim(ginkgo)
```
Here I have used the nrow() and ncol() functions (not arguments to a function, like in the matrix section) to reveal the number of rows and columns in the ginkgo data frame. The dim() function is being used to grab both values at the same time, rows first, then columns.


## Subsetting

For these examples, we will again be using the ginkgo data frame.

```{r}
#You can use the $ operator to retrieve a column by name
ginkgo$site_id

#You can use brackets to retrieve specific rows, columns, or elements. The first example retrieves Row 1, the second retrieves the specific element at Row 2 Column 3, and the third example retrieves Column 3.
ginkgo[1,]
ginkgo[2,3]
ginkgo[,3]
```

### Subset()

Now we'll switch gears slightly and use the palmer penguins data with which we've become so familiar.

```{r}
#Here we're using the subset() function to retrieve only the penguins in the data package of species 'Adelie'
require(palmerpenguins)
dat_Adelie = droplevels(subset(penguins, species == "Adelie"))
dat_Adelie$species
```

## Numerical Data Exploration

### Summary()
The summary() function is used to generate a summary (Duh) of statistical measures for one or more numeric variables

```{r}
summary(ginkgo)
```

### mean() and sd()
Now, if I want to just get the mean or standard deviation specifically from one of those columns, whether to prevent having to sift through the summary or to store in a variable, for that I can use the mean() or sd() functions, respectively

```{r}
mean(ginkgo$petiole_length, na.rm = TRUE)
#Notice I had to add the argument na.rm = TRUE here, because the NA elements in that column would otherwise prevent a mean from being calculated. Instead the function would just return 'NA'

sd(ginkgo$max_width)
```

## Graphical Data Exploration
### plot()
To create a scatterplot of the ginkgo data, we are going to use the plot() function

```{r}
plot(x = ginkgo$max_depth,
     y = ginkgo$max_width,
    col = "plum4", pch = 4, cex = .75,
    main = "Plot of Leaf Depth vs Width",
    xlab = "Max Leaf Depth (mm)",
    ylab = "Max Leaf Width (mm)",
    xlim = c(0,150), ylim = c(0,150))
```

In this plot, we use these arguments as follows:
col: for setting the color of the points
pch: for setting the symbology for the points
cex: for setting the size of the points, with 1 as the baseline
main: for setting the main title of the graph
xlab: x-axis label
ylab: y-axis label
xlim: lower and upper bounds of the x-axis
ylim: lower and upper bounds of the y-axis

### hist()
To create a histogram of the data, we use the hist() function

```{r}
require(palmerpenguins)
dat_pen = penguins

hist(dat_pen$flipper_length_mm, breaks = 20)
```

We used the 'breaks =' argument to tell R how many bins of data (or columns on the histogram) we wanted.

### boxplot()
To create a boxplot, we use the boxplot() function

```{r}
#Standard 1-variable boxplot
boxplot(ginkgo$petiole_length)

#Conditional Boxplot with Notch Depth vs Seeds Present/Absent
boxplot(notch_depth ~ seeds_present, data = ginkgo)

```

### par()
To create multiple plots in the same figure, we need first to use the par() function. Here we specify mfrow as c(2,2), meaning we want two columns and two rows of panels, for 4 total.

```{r}
par(mfrow = c(2,2))

hist(dat_pen$bill_length_mm, xlab = "Bill Length (mm)", ylab = "Frequency", main = "Bill Length Histogram", col = "goldenrod3")
hist(dat_pen$bill_depth_mm, xlab = "Bill Depth (mm)", ylab = "Frequency", main = "Bill Depth Histogram", col = "darksalmon")
hist(dat_pen$flipper_length_mm, xlab = "Flipper Length (mm)", ylab = "Frequency", main = "Flipper Length Histogram", col = "chocolate3")
hist(dat_pen$body_mass_g, xlab = "Body Mass (mm)", ylab = "Frequency", main = "Body Mass Histogram", col = "darkmagenta")

```

## Distribution Functions

### dnorm()
This function is used to compute the probability of seeing a specific value in a normal distribution given a set mean and sd

```{r}
dnorm(x = 1.2, mean = 2, sd = 2)
```

There is an 18.4% chance of seeing a value of 1.2 in a normal distribution with a mean of 2 and a sd of 2.

### pnorm()
This function is used to compute the probability of observing a given value (q) in a normal distribution with a set mean and sd

```{r}
pnorm(q = 1.2, mean = 2, sd = 2)
```

There is a 34.5% chance of seeing a value less than 1.2 in a normal distribution with a mean of 2 and a sd of 2.

### qnorm()
This function is used to compute the probability of falling between certain percentiles in a normal distribution with a set mean and sd

```{r}
qnorm(p = 0.25:0.75, mean = 2, sd = 2)
```

There is a 65% chance of a value being within the 1st and 4th quantile in a normal distribution with mean 2 and sd 2.

### dbinom
This function computes the probability of observing exact counts of successes in a binomial distribution given a set size and probability

```{r}
dbinom(x = 0:4, size = 4, prob = 0.75, log = FALSE)
```

As we can see here, the chance of exactly 4 successes is 42%

### pbinom
This function computes the probability of observing a certain number of counts or fewer in a binomial distribution given a set size and probability.

```{r}
pbinom(q = 0:4, size = 4, prob = 0.75)
```

As we see here, the probability of 4 or fewer successes is 68%

### qbinom
This function is used to compute the how many values fall between certain percentiles in a binomial distribution with a set size and probability

```{r}
qbinom(p = 0.25:0.75, size = 4, prob = 0.75)
```

Here we see that 2 values fall between the given percentiles with a size of 4 and a probability of 0.75